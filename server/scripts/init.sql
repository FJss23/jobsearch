-- Create a custom schema
CREATE SCHEMA IF NOT EXISTS jobsearch;

-- Tables
CREATE TABLE IF NOT EXISTS jobsearch.tag(
	tag_id integer GENERATED BY DEFAULT AS IDENTITY,
    default_name varchar(80) NOT NULL CHECK (default_name <> ''),
	tag_code varchar(30) NOT NULL CHECK (tag_code <> ''),

    created_at timestamp DEFAULT CURRENT_TIMESTAMP,
    created_by varchar(250),
    updated_at timestamp,
    updated_by varchar(250),

    PRIMARY KEY (tag_id)
);

CREATE TABLE IF NOT EXISTS jobsearch.company(
	company_id integer GENERATED BY DEFAULT AS IDENTITY,
	name varchar(100) NOT NULL CHECK (name <> ''),
    description varchar(3000) NOT NULL CHECK (description <> ''),
	logo_route varchar(300),
    twitter varchar(100),
    facebook varchar(100),
    instagram varchar(100),
    website varchar(200),

    created_at timestamp DEFAULT CURRENT_TIMESTAMP,
    created_by varchar(250),
    updated_at timestamp,
    updated_by varchar(250),
    deleted_at timestamp,

    PRIMARY KEY (company_id)
);

CREATE TYPE joboffer_state AS ENUM ('CREATED', 'EXPIRED', 'CLOSED');

CREATE TYPE joboffer_workday AS ENUM ('FULL_TIME', 'PART_TIME', 'PER_HOUR');

CREATE TYPE remote_type  AS ENUM ('REMOTE_WORK', 'HYBRID_WORK', 'ON_SITE');

CREATE TABLE IF NOT EXISTS jobsearch.joboffer(
	joboffer_id integer GENERATED BY DEFAULT AS IDENTITY,
	title varchar(150) NOT NULL CHECK (title <> ''),
	industry varchar(100),
	salary_from numeric CHECK (salary_from > 0),
	salary_up_to numeric CHECK (salary_up_to > 0),
	salary_coin varchar(40),
	location varchar(100) NOT NULL CHECK (location <> ''),
	workday_code joboffer_workday NOT NULL,
	description varchar(8000) NOT NULL CHECK (description <> ''),
    state joboffer_state NOT NULL,
	company_id integer,
    remote_type varchar(30) NOT NULL,
    how_to_apply varchar(2000),
    scrapped boolean,

    created_at timestamp DEFAULT CURRENT_TIMESTAMP,
    created_by varchar(250),
    updated_at timestamp,
    updated_by varchar(250),
    deleted_at timestamp,

    PRIMARY KEY (joboffer_id),
    FOREIGN KEY (company_id) REFERENCES jobsearch.company (company_id) ON DELETE CASCADE,
    CHECK (salary_up_to >= salary_from)
);

CREATE TABLE IF NOT EXISTS jobsearch.joboffer_tag(
    joboffer_id integer,
    tag_id integer,

    created_at timestamp DEFAULT CURRENT_TIMESTAMP,
    created_by varchar(250),
    updated_at timestamp,
    updated_by varchar(250),
    deleted_at timestamp,

    PRIMARY KEY (joboffer_id, tag_id),
    FOREIGN KEY (tag_id) REFERENCES jobsearch.tag (tag_id) ON DELETE SET NULL (tag_id),
    FOREIGN KEY (joboffer_id) REFERENCES jobsearch.joboffer (joboffer_id) ON DELETE CASCADE
);

CREATE TYPE appuser_role AS ENUM ('CANDIDATE', 'COMPANY', 'COMPANY_ADMIN', 'APP_ADMIN');

CREATE TABLE IF NOT EXISTS jobsearch.appuser(
    appuser_id integer GENERATED BY DEFAULT AS IDENTITY,
    first_name varchar(70) NOT NULL CHECK (first_name <> ''),
    last_name varchar(70) NOT NULL CHECK (last_name <> ''),
    email varchar(100) UNIQUE NOT NULL CHECK (email <> '') ,
    password varchar(50) NOT NULL CHECK (password <> ''),
    role appuser_role NOT NULL,
    locked boolean DEFAULT FALSE,
    enabled boolean DEFAULT FALSE,
    logged_at timestamp,
    company_id integer,

    created_at timestamp DEFAULT CURRENT_TIMESTAMP,
    created_by varchar(250),
    updated_at timestamp,
    updated_by varchar(250),
    deleted_at timestamp,

    PRIMARY KEY (appuser_id),
    FOREIGN KEY (company_id) REFERENCES jobsearch.company (company_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS jobsearch.cv(
    cv_id integer GENERATED BY DEFAULT AS IDENTITY,
    appuser_id integer,
    activities varchar(600),
    contact_email varchar(100) NOT NULL CHECK (contact_email <> ''),
    phone varchar(15),

    created_at timestamp DEFAULT CURRENT_TIMESTAMP,
    created_by varchar(250),
    updated_at timestamp,
    updated_by varchar(250),
    deleted_at timestamp,

    PRIMARY KEY (cv_id),
    FOREIGN KEY (appuser_id) REFERENCES jobsearch.appuser (appuser_id) ON DELETE CASCADE
);

-- EXP = Experience / EDU = Education
CREATE TYPE career_section AS ENUM ('EXP', 'EDU');

CREATE TABLE IF NOT EXISTS jobsearch.career(
    career_id integer GENERATED BY DEFAULT AS IDENTITY,
    cv_id integer,
    organization varchar(100) NOT NULL CHECK (organization <> ''),
    date_from date NOT NULL,
    date_until date,
    section career_section NOT NULL,
    description varchar(500) NOT NULL CHECK (description <> ''),

    created_at timestamp DEFAULT CURRENT_TIMESTAMP,
    created_by varchar(250),
    updated_at timestamp,
    updated_by varchar(250),
    deleted_at timestamp,

    PRIMARY KEY (career_id),
    FOREIGN KEY (cv_id) REFERENCES jobsearch.cv (cv_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS jobsearch.cv_tag(
    cv_id integer,
    tag_id integer,

    created_at timestamp DEFAULT CURRENT_TIMESTAMP,
    created_by varchar(250),
    updated_at timestamp,
    updated_by varchar(250),

    PRIMARY KEY (cv_id, tag_id),
    FOREIGN KEY (tag_id) REFERENCES jobsearch.tag (tag_id) ON DELETE SET NULL (tag_id),
    FOREIGN KEY (cv_id) REFERENCES jobsearch.cv (cv_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS jobsearch.selection_process(
    joboffer_id integer,
    appuser_id integer,
    company_id integer,
    discarded_by_company boolean,
    last_time_reviewed date,

    created_at timestamp DEFAULT CURRENT_TIMESTAMP,
    created_by varchar(250),
    updated_at timestamp,
    updated_by varchar(250),

    PRIMARY KEY (joboffer_id, appuser_id),
    FOREIGN KEY (joboffer_id) REFERENCES jobsearch.joboffer (joboffer_id),
    FOREIGN KEY (appuser_id ) REFERENCES jobsearch.appuser (appuser_id) ON DELETE SET NULL(appuser_id),
    FOREIGN KEY (company_id) REFERENCES jobsearch.company (company_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS jobsearch.confirmation_token(
    confirmation_token_id integer GENERATED BY DEFAULT AS IDENTITY,
    token varchar(100),
    expires_at timestamp,
    confirmed_at timestamp,
    appuser_email varchar(100) NOT NULL CHECK (appuser_email <> ''),

    created_at timestamp DEFAULT CURRENT_TIMESTAMP,

    PRIMARY KEY (confirmation_token_id),
    FOREIGN KEY (appuser_email) REFERENCES jobsearch.appuser (email)
);

-- Create a user to be used in the app
CREATE USER jobsearch_user NOSUPERUSER NOCREATEROLE INHERIT ENCRYPTED PASSWORD 'user';
GRANT CONNECT ON DATABASE jobsearch_db TO jobsearch_user;

GRANT USAGE ON SCHEMA jobsearch TO jobsearch_user;
GRANT SELECT, INSERT, DELETE, UPDATE ON ALL TABLES IN SCHEMA jobsearch TO jobsearch_user;

CREATE FUNCTION update_value_updated_at() RETURNS TRIGGER AS $$
    BEGIN
       NEW.updated_at = now();
       RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER tag_updated_at_automatic
    BEFORE UPDATE ON jobsearch.tag
    FOR EACH ROW
    EXECUTE FUNCTION update_value_updated_at();

CREATE TRIGGER company_updated_at_automatic
    BEFORE UPDATE ON jobsearch.company
    FOR EACH ROW
    EXECUTE FUNCTION update_value_updated_at();

CREATE TRIGGER joboffer_updated_at_automatic
    BEFORE UPDATE ON jobsearch.joboffer
    FOR EACH ROW
    EXECUTE FUNCTION update_value_updated_at();

CREATE TRIGGER joboffer_tag_updated_at_automatic
    BEFORE UPDATE ON jobsearch.joboffer_tag
    FOR EACH ROW
    EXECUTE FUNCTION update_value_updated_at();

CREATE TRIGGER appuser_updated_at_automatic
    BEFORE UPDATE ON jobsearch.appuser
    FOR EACH ROW
    EXECUTE FUNCTION update_value_updated_at();

CREATE TRIGGER cv_updated_at_automatic
    BEFORE UPDATE ON jobsearch.cv
    FOR EACH ROW
    EXECUTE FUNCTION update_value_updated_at();

CREATE TRIGGER career_updated_at_automatic
    BEFORE UPDATE ON jobsearch.career
    FOR EACH ROW
    EXECUTE FUNCTION update_value_updated_at();

CREATE TRIGGER cv_tag_updated_at_automatic
    BEFORE UPDATE ON jobsearch.cv_tag
    FOR EACH ROW
    EXECUTE FUNCTION update_value_updated_at();

CREATE TRIGGER selection_process_updated_at_automatic
    BEFORE UPDATE ON jobsearch.selection_process
    FOR EACH ROW
    EXECUTE FUNCTION update_value_updated_at();
